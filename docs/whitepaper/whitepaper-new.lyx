#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass revtex4
\begin_preamble
\tabcolsep=8pt

\usepackage{caption,setspace}
\captionsetup{font={normalsize}}

\def\bibsection{\section*{\refname}}
\end_preamble
\options aps,preprint
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures false
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type numerical
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Flink: The Fast Distributed Payment Network
\end_layout

\begin_layout Author
M.
\begin_inset space ~
\end_inset

Grasic
\end_layout

\begin_layout Author URL

https://www.flinkcoin.org/
\end_layout

\begin_layout Address
\begin_inset CommandInset href
LatexCommand href
target "info@flinkcoin.org"
type "mailto:"
literal "false"

\end_inset


\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Abstract
Cryptocurrency appeared as an interesting technology that promised to revolution
ize the payment system.
 But over time, cryptocurrencies have been backed into a corner and confined
 to store of value speculation.
 Cryptocurrencies are almost never used as a means of payment and most transacti
ons only take place through centralized exchange systems.
 Here we introduce a feeless cryptocurrency based on a block-lattice design
 with asynchronous transactions and block confirmations.
 Flink is designed for high transaction speeds of more than 4000 transactions
 per second with low latency of around 3 seconds or less.
 With these features, Flink is the ideal cryptocurrency for consumer transaction
s as well as high-frequency and zero-fee business transactions.
 In terms of security, all cryptographic elements are integrated into a
 replaceable design so that cryptographic functions can be swapped out in
 case of quantum security requirements.
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Distributed ledger technology (DLT) (
\begin_inset CommandInset citation
LatexCommand citet
key "dlt1,MaullRoger2017DLTA"
literal "false"

\end_inset

) has been on the rise since the introduction of Bitcoin in 
\begin_inset CommandInset citation
LatexCommand citet
key "bitcoin"
literal "false"

\end_inset

.
 Since Bitcoin, many new and promising DLT projects have been introduced,
 but none have truly achieved global adaptation as a payment system.
 DLT-based currencies or cryptocurrencies have mostly been isolated to act
 as stores of value, much like gold, and the idea of a global, fair and
 cheap payment system has mostly been abandoned.
 This is due to government regulations, but also high transaction fees and
 slow transaction verifications.
 For a DLT currency to be truly effective and better than government-backed
 currencies, transaction speeds must be near-instantaneous with zero or
 negligible fees.
 Without this improvement, DLT currencies offer no real value to the public
 or consumers, and thus no reason to use them.
\end_layout

\begin_layout Subsection
Motivation
\end_layout

\begin_layout Standard
Although many new DTL technologies have been introduced since the launch
 of Bitcoin.
 The actual use of a cryptocurrency as a payment system is still lacking
 as more and more projects gain traction as a DeFI (decentralised finance)
 use case.
 Therefore, there is still a lot of room for improvement.
 
\end_layout

\begin_layout Standard
The perfect payment system is: 
\end_layout

\begin_layout Itemize
Feeless or almost zero fee: Zero fee makes sending money attractive and
 enables various business opportunities.
 
\end_layout

\begin_layout Itemize
Fast: Low latency is important to enable fast payments for goods.
\end_layout

\begin_layout Itemize
Inexpensive to operate: The system must be available and easy to operate.
 
\end_layout

\begin_layout Itemize
Secure: Security is of course of paramount importance, as trust in the system
 is required.
\end_layout

\begin_layout Standard
Nano (
\begin_inset CommandInset citation
LatexCommand citet
key "nano"
literal "false"

\end_inset

) was one of the first DAG (Directed Acyclic Graph) (
\begin_inset CommandInset citation
LatexCommand citet
key "dag"
literal "false"

\end_inset

) based cryptocurrencies that promised all these features.
 DAG is now implemented in many projects alike (
\begin_inset CommandInset citation
LatexCommand citet
key "iota,byteball"
literal "false"

\end_inset

).The DAG-based cryptocurrencies have a performance advantage in that transaction
s can be confirmed asynchronously, rather than synchronously as in a linear
 system like the blockchain.
 This drastically lowers transaction confirmation times, making them mostly
 instantaneous (in the range of 1-3s) and also improves transaction throughput
 to over 1000 tps.
 Feeless DAG systems achieve most of these goals, but availability and stability
 suffer from such a design.
 Without transaction fees, DDOS attacks are very cheap, and recent attacks
 on the Nano network have further illustrated this vulnerability.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/basic.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Block-lattice data structure.
\begin_inset CommandInset label
LatexCommand label
name "fig:basic"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Basic Concept
\end_layout

\begin_layout Standard
Here we introduce Flink, a zero fee, high speed and secure network that
 is optimized for enterprise use, but can also be run by individuals on
 commodity hardware.
 The system is optimized for fast transactions and is based on a peering
 algorithm that connects the most influential nodes in a way that minimizes
 block confirmation latency.
 The system follows a similar architecture to Nano, which is based on a
 block lattice.
 Each account has its own blockchain, which is shown on Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:basic"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 Here, the account chain can only be updated by the account holder.
 Since the blockchain of the accounts can be changed independently, we do
 not need a common block to fill up with transactions and the confirmation
 latency is greatly reduced.
 
\end_layout

\begin_layout Subsection
Account Based
\end_layout

\begin_layout Standard
Instead of a UTXO transaction design, as used in Bitcoin and many other
 cryptocurrencies, an account-based design was chosen instead.
 The advantage of such an approach is simplicity, speed, and usually lower
 memory requirements.
 The only disadvantage of this approach is anonymity, which is more difficult
 to ensure in a DLT design.
 For this 2nd layer, solutions are planned.
\end_layout

\begin_layout Subsection
Sending Funds
\end_layout

\begin_layout Standard
Because each account blockchain can only be changed by the account holder.
 A money transfer can only be done with two transactions.
 First, account A performs a send transaction to account B, then account
 B requests the transaction by a new receive transaction.
 This approach is more complicated compared to blockchains like Ethereum
 and Bitcoin, but the advantages lie in the confirmation process, which
 can be asynchronous and therefore very scalable.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/consensus.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Node weight assignment from accounts.
\begin_inset CommandInset label
LatexCommand label
name "fig:consenus"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
System Design
\end_layout

\begin_layout Standard
The system is based on a block-lattice-like structure, where each account
 has its own blockchain.
 It uses an optimized consensus voting based algorithm that reduces latency
 and network traffic.
 The block is optimized for size and speed and represents a user transaction.
 The node network is also highly interconnected to further reduce transaction
 latency.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/algorithm.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
New block voting process.
\begin_inset CommandInset label
LatexCommand label
name "fig:algorithm"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Consensus Algorithm 
\end_layout

\begin_layout Standard
Consensus is achieved using a voting-based consenous algorithm and recently
 PoV (Proof of Vote) (
\begin_inset CommandInset citation
LatexCommand citet
key "10.3389/fbloc.2020.00011"
literal "false"

\end_inset

) consensus algorithms become well known in the scientific literature.
 Like PoW, they are Byzantine fault-tolerant, secure and stable (
\begin_inset CommandInset citation
LatexCommand citet
key "neo"
literal "false"

\end_inset

).
 As in ORV (Open Representative Voting) (
\begin_inset CommandInset citation
LatexCommand citet
key "nano"
literal "false"

\end_inset

), voting weights are determined by the account holder's selection of a
 representative.
 The representative is assigned a voting weight relative to the balance
 of all accounts assigned to him, as shown in the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:consenus"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 This approach is particularly suitable for feeless systems, since the cost
 of validating a transaction is low and without risk.
 With PoW (Proof of Work) the cost is very high and with PoS (Proof of Stake)
 there is potential risk when staking the currency.
\end_layout

\begin_layout Standard
Flooding the network directly with votes would lead to message overload
 and would be slow and inefficient.
 To limit the number of votes and messages, some systems choose a middleman
 who then performs the validation process.
 While this increases performance, it decreases resilience to a potential
 attack.
 Here, we describe a consensus process in which the system is not flooded
 with votes, but the node receiving the block is tasked with procuring all
 the necessary vote weights to satisfy the
\begin_inset Formula $\left[\frac{W_{T}}{2}+1\right]<W_{c}$
\end_inset

 condition, where 
\begin_inset Formula $W_{T}$
\end_inset

 is the total weight of all the coins and 
\begin_inset Formula $W_{C}$
\end_inset

 is the weight of the collected votes.
 First, the node receiving the new block collects the votes of the nodes
 one by one so that the majority rule is satisfied.
 Once the votes are collected and the majority rule is satisfied, a voting
 package is created with the new block and all the votes.
 This is then sent to all nodes using the network flooding procedure described
 below, shown on Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:algorithm"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Proof of Vote on Blocks
\end_layout

\begin_layout Standard
The user creates a block and sends it to a node.
 The node that receives the block first is responsible for obtaining the
 required voting majority before it creates the voting package and injects
 it into the network.
 The nodes validate the block and vote independently.
 The majority weight is calculated with:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
W_{C}^{X}=\sum_{i=1}^{N}W_{i}^{X}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $N$
\end_inset

 is the number of votes collected and 
\begin_inset Formula $X$
\end_inset

 is the block voted on.
 If the majority condition is not met, 
\begin_inset Formula $N$
\end_inset

 can be increased, which in practice means that a vote is requested from
 more nodes.
 If all or most nodes are requested and no transaction vote majority is
 reached, the block is discarded.
\end_layout

\begin_layout Subsection
Network Flooding
\end_layout

\begin_layout Standard
In network flooding, a message received by a node is sent over all outgoing
 connections except the one over which it was received (
\begin_inset CommandInset citation
LatexCommand citet
key "inproceedings"
literal "false"

\end_inset

).
 In uncontrolled flooding, each node unconditionally distributes messages
 to each of its neighbors.
 Without conditional logic to prevent infinite repetition of the same packet.
 In controlled flooding, two algorithms are common: SNCF (Sequence Number
 Controlled Flooding) and RPF (reverse-path forwarding).
 In SNCF, the node appends its own address and sequence number to the packet
 because each node has a memory of addresses and sequence numbers.
 When it receives a packet in memory, it immediately discards it, while
 in RPF, the node only forwards the packet.
\end_layout

\begin_layout Standard
The system uses a custom SNCF algorithm where each message is given a unique
 identifier and the nodes remember all the identifiers already processed.
 The node information is not added to the original message as this would
 slow down the process, alter the source message and increase the size of
 the message.
 Nodes also do not send messages to all connections, but only to connections
 that are designated for flooding.
 This limits network traffic while providing multiple direct connections
 during the voice collection phase.
 The number of messages needed for a block confirmation can be calculated
 with:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
M=N\ast c_{f}+N_{W}*2
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Where 
\begin_inset Formula $M$
\end_inset

 is the number of messages 
\begin_inset Formula $N$
\end_inset

 is the total number of nodes in the network, 
\begin_inset Formula $c_{f}$
\end_inset

 is the number of connections each node provides for flooding and 
\begin_inset Formula $N_{w}$
\end_inset

 is the number of nodes required to achieve majority voting.
 
\end_layout

\begin_layout Subsection
Partition Tolerance
\end_layout

\begin_layout Standard
If the network is split into two completly separate partitions 
\begin_inset Formula $\alpha$
\end_inset

 and 
\begin_inset Formula $\beta$
\end_inset

, where 
\begin_inset Formula $\alpha\cap\beta=\oslash$
\end_inset

.
 As long one partition 
\begin_inset Formula $\alpha,\beta$
\end_inset

 satisfies the condition 
\begin_inset Formula $\left[\frac{W_{T}}{2}+1\right]<W_{c}$
\end_inset

, consenus can be achieved and new blocks can be confirmed (
\begin_inset CommandInset citation
LatexCommand citet
key "crypto-2019-29871"
literal "false"

\end_inset

).
 This is possible because 
\begin_inset Formula $W_{T}$
\end_inset

 is global and does not change when the size of the network nodes is smaller.
 If the majority condition is not satisfied, the network becomes temporarily
 unavailable.
 Here, according to Brewer's CAP theorem in 
\begin_inset CommandInset citation
LatexCommand citet
key "Diack_Ndiaye_Slimani_2013"
literal "false"

\end_inset

, availability is sacrificed for consistency and partition tolerance.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Block with all data definitions.
 
\begin_inset CommandInset label
LatexCommand label
name "tab:block-design"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="2">
<features tabularvalignment="middle">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Field
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
version
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
block version, for future changes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
timestamp
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
transaction timestamp, special importance in the system
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
blockType
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
block type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
previousBlockHash
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
previous block hash value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
accountId
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
block for which account
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
representativeNodeId
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
account chosen representative
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
balance
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
current account balance
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
amount
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
transaction amount
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sendAccountId
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
receiving account id
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
receiveBlockHash
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
block we receive funds from
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
referenceCode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
payment reference code useful for accounting
\end_layout

\end_inset
</cell>
</row>
<row endhead="true">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
publicKeys
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
last valid public keys
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Block Design
\end_layout

\begin_layout Standard
To simplify the design shown in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:block-design"
plural "false"
caps "false"
noprefix "false"

\end_inset

, a common state block was chosen.
 Having all state information in each block speeds up transaction times
 and simplifies the design.
 It also improves node synchronization and the transaction validation process.
 Although this increases the memory requirements, this is optimized by state
 pruning.
 
\end_layout

\begin_layout Standard
The design of the system and block is strongly focused on change flexibility.
 Once a distributed system is in production, it is extremely difficult to
 change the block design.
 To ease the burden, we have incorporated a version code so that the block
 can change from one version to another.
 Also, the serialization process is done in such a way that new fields can
 be added easily.
\end_layout

\begin_layout Subsection
Transaction Types
\end_layout

\begin_layout Standard
Although the block structure is the same for each transaction.
 The system still functionally distinguishes between different transactions
 sent.
 Flink supports 4 different transaction types: create, send, receive, and
 update.
\end_layout

\begin_layout Subsubsection
Create Transaction
\end_layout

\begin_layout Standard
Before an account can be used to send or receive, it must first be opened.
 The account is set up with a zero balance.
 Also, at the beginning, the first public keys are injected and the representati
ve is selected.
\end_layout

\begin_layout Subsubsection
Receive Transaction
\end_layout

\begin_layout Standard
Before transactions can be received, the account must be created.
 Once it is successfully created, transactions can be received.
 The transaction is received by a corresponding block hash (receiveBlockHash)
 and sent to this account.
 Therefore, a block hash must be referenced from which we receive the amount.
 The same block can only be referenced once.
 The received block updates the balance status.
\end_layout

\begin_layout Subsubsection
Send Transaction
\end_layout

\begin_layout Standard
Before sending a transaction for the first time, the account must have a
 non-zero balance.
 Once a non-zero value is detected, the money can be sent to an account
 (sendAccountId).
 The account balance is updated with the send and receive block.
 The balance should never be less than zero.
\end_layout

\begin_layout Subsubsection
Update Transaction
\end_layout

\begin_layout Standard
An update transaction is usually used to assign the representative (representati
veNodeId).
 This can also be done for create, update and receive transactions.
 But this type of transaction is for when nothing is to be sent or received.
\end_layout

\begin_layout Subsection
Multisig Support
\end_layout

\begin_layout Standard
Multisig support is an extremely important feature of any large blockchain.
 Exchanges and enterprise users will need this in the future to increase
 security and distribute fund management responsibilities.
 However, there are also multisig-like approaches where multiple private
 keys can share a public key.
 These approaches are quite complicated to integrate into production environment
s.
 Therefore, Flink inherently supports multisig with up to five signatures
 as a block design for specifying multiple public keys and signatures.
\end_layout

\begin_layout Subsection
Fast Transaction Times
\end_layout

\begin_layout Standard
In order for a block to be confirmed, a quorum of votes must be reached
 (majority vote weight ).
 In order for this to happen quickly, all representatives with high vote
 weights must be connected to each other so that messaging and confirmation
 occur as quickly as possible.
 Each node therefore tries to connect to as many representative nodes as
 possible.
 The nodes are also checked for latency so that the fast nodes are connected
 first.
\end_layout

\begin_layout Subsection
Time-Restricted Transactions
\end_layout

\begin_layout Standard
Each block has a creation timestamp.
 Each transaction can only occur in a predefined time window of, say, 1-10min.
 If the transaction is not confirmed in this time window, it becomes invalid.
 This measure is to help prevent DOS and keep the backlog small.
 Normally DLT systems shop all transactions until they are confirmed, but
 this becomes complicated when a transaction is not confirmed within the
 time frame and can wait for days for confirmation.
 This action will result in a transaction either being confirmed immediately
 or cancelled.
 In this case, the wallet software has to resend the transaction.
 The system is designed for low-latency transactions, which makes sense.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/unclaimed.png
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Unclaimed block queue.
\begin_inset CommandInset label
LatexCommand label
name "fig:unclaimed"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Unclaimed block queue
\end_layout

\begin_layout Standard
Since not all nodes are online all the time and accounts can move from one
 node to another.
 It is difficult to require second level systems to monitor incoming/unused
 transactions sent to that account.
 For this, Flink implements an unclaimed block queue, shown in 
\begin_inset Formula $\mbox{Figure}$
\end_inset


\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:unclaimed"
plural "false"
caps "false"
noprefix "false"

\end_inset

,
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit
 which allows an account owner to always correctly list all unclaimed blocks.
 The queue is updated in a separate transcation and is limited in size.
 Account holders must receive transactions on a regular basis, otherwise
 they risk not being informed of incoming transactions.
 Even if this information is missing, new transactions can be made at any
 time.
\end_layout

\begin_layout Section
Miscellaneous Features
\end_layout

\begin_layout Standard
Flink has some advanced features not normally found in other DLT projects.
 The functions are mostly modelled after existing banking systems, which
 makes the transition to a DLT system easier.
\end_layout

\begin_layout Subsection
Payment Request
\end_layout

\begin_layout Standard
Flink introduced something usually found in newer traditional mobile banking
 solutions.
 Where a user can send a payment request to another user.
 That user then usually just confirms the payment with the amount, reference
 number and description already stored.
 In Flink, a payment request is sent to a node, which then redistributes
 it to all other nodes online.
 The wallet system for that user receives the request from the relying node
 and stores it in the local database.
 The nodes do not store payment requests, and the entire system operates
 only on the best-effort principle.
 This means that the wallet system and its node must be online for the request
 to be received.
\end_layout

\begin_layout Subsection
Quantum Safety
\end_layout

\begin_layout Standard
With the development of quantum computers, quantum security is becoming
 increasingly important.
 Elliptic curve cryptography is vulnerable to quantum-based attacks, and
 quantum-resistant cyphers are not yet widely and fully tested.
 For this reason, Flink was designed with cyphers interchangeability in
 mind.
 For example, account addresses are not created from public keys, but are
 randomly generated.
 The currently valid public keys are specified with the last confirmed block.
 This makes it easier to exchange keys and, in the future, also cyphers.
\end_layout

\begin_layout Subsection
Reference Number/Code
\end_layout

\begin_layout Standard
The traditional banking system typically uses payment reference numbers
 to identify individual payments.
 With DLT, each payment is usually sent to a separate address.
 Because of Flink's account-based design, an additional payment reference
 code has been added to the block.
 This is a practical approach to tracking payments that is usually missing
 in DLT concepts.
\end_layout

\begin_layout Section
Attack Prevention
\end_layout

\begin_layout Standard
The most problematic attack point of a feeless payment system are DOS (Denial
 of Service) and DDOS (Distributed Denial of Service)(
\begin_inset CommandInset citation
LatexCommand citet
key "886455"
literal "false"

\end_inset

) attacks.
 Since transactions are free, the system is very vulnerable to spam transactions
 that overload the entire system.
 In Flink, many parts of the system are specifically designed to prevent
 such attacks.
\end_layout

\begin_layout Subsection
DOS Attacks
\end_layout

\begin_layout Standard
The following describes the most common DOS attacks to which the system
 is most vulnerable.
 DOS Attacks are difficult to completely eliminate, especially in a system
 without fees.
 However, the system has many approaches to counter such attacks.
 Overall, according to the CAP theorem, the system prefers consistency and
 partition tolerance over availability.
 However, availability is potentially sacrificed only during the active
 attack phase.
\end_layout

\begin_layout Subsubsection
Node Overflow Attack
\end_layout

\begin_layout Standard
In this attack, the entity creates multiple node addresses.
 Since all nodes must be confirmed before they are added to the database,
 this can place an extreme load on the entire system.
 The system protects itself by limiting the number of nodes that can be
 created per day (adjustable parameter).
 With this protection, the system will function normally under these conditions.
\end_layout

\begin_layout Subsubsection
Account Overflow Attack
\end_layout

\begin_layout Standard
This attack floods the network with multiple accounts.
 Each node can only publish a limited number of blocks (including account-creati
ng blocks).
 For this attack to succeed, the attacker must have access to a node with
 a very high weight, since the publication rate depends on the node's voting
 weight.
 Even then, the rate is capped, so the probability of completely disabling
 the entire network is low.
 Also, high weight nodes are usually managed by crypto exchanges, which
 are likely to monitor the integrity and status of the nodes.
\end_layout

\begin_layout Subsubsection
Transaction Overflow Attack
\end_layout

\begin_layout Standard
In this attack, the network is overrun with multiple transactions.
 As in the previous case, each node can only publish a limited number of
 blocks (including account creation blocks).
 For an attack to be successful, the attacker must have access to a node
 with a very high weight, which is not easy to achieve.
 Additionally, PoW might be introduced in the future to further prevent
 transaction spam.
\end_layout

\begin_layout Subsubsection
Unconfirmed Transaction Overflow Attack 
\end_layout

\begin_layout Standard
This attack targets each account's unconfirmed transaction queue.
 Accounts are required to confirm all incoming transactions.
 Once the queue reaches a certain size, new items are discarded.
 This makes it very difficult to actually compromise the system.
 The account holder can still receive transactions that aren't in the queue,
 but must manually retrieve them.
\end_layout

\begin_layout Subsubsection
Brute Force Attack 
\end_layout

\begin_layout Standard
In the event of a DDOS attack, nodes may be removed from the network.
 Such an attack could cause the system to become temporarily unavailable
 for confirmations, as the majority voting weight wouldn't be reached.
 The system would recover quickly once the attack is over.
\end_layout

\begin_layout Subsection
System Integrity Attacks
\end_layout

\begin_layout Standard
In these attacks, the attacker is usually trying to gain a financial advantage.
 Usually, they try to double-spend or something similar.
 The consensus algorithm ensures the integrity of the system.
 All transactions must be confirmed within a time interval with 
\begin_inset Formula $\left[\frac{W_{T}}{2}+1\right]$
\end_inset

 voting weight.
 For the system to be compromised, someone would have to receive a majority
 voting weight.
 In practice this weight is set to a higher number to further increase security.
\end_layout

\begin_layout Subsubsection
Primary Protection
\end_layout

\begin_layout Standard
Since 
\begin_inset Formula $\left[\frac{W_{T}}{2}+1\right]$
\end_inset

 voting weight is quite large, the attacker would have to make large investments
 to gain that much voting weight, which is unlikely.
 Moreover, such investments would destroy the network and cause the investment
 to expire.
\end_layout

\begin_layout Subsubsection
Fork protection
\end_layout

\begin_layout Standard
Local forks can occur when an account publishes two transactions with the
 same previous block.
 In this case, both transactions are voted on, but each node can only vote
 for one of the transactions.
 The transaction that reaches 
\begin_inset Formula $\left[\frac{W_{T}}{2}+1\right]$
\end_inset

 will be persisted.
 If neither transaction reaches a majority within the specified time interval,
 both transactions are discarded.
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Standard
In the implementation phase, the decision was made to build the system in
 a higher level (managed) programming language.
 Therefore, C, C++ were not considered.
 In the author's opinion, the system closely resembles a IT system with
 large memory and database requirements.
 Such systems are usually limited in performance by the database design
 and not by the programming language chosen.
 Therefore, the reference implementation was written in Java.
 The implementation is available on Github as an open source project under
 the Apache license.
\end_layout

\begin_layout Subsection
Network
\end_layout

\begin_layout Standard
The system uses protobuf to serialize messages over a TCP stream.
 Connections between hosts are limited to one, which is a full duplex.
 Connection handling is asynchronous with low memory requirements, allowing
 multiple connections.
\end_layout

\begin_layout Subsection
Storage
\end_layout

\begin_layout Standard
RocksDB key value store is used for storage.
 RocksDB is a highly scalable and performant database with transaction support
 developed by Facebook.
\end_layout

\begin_layout Subsection
Cryptography
\end_layout

\begin_layout Standard
For signing, ED25519 (
\begin_inset CommandInset citation
LatexCommand citet
key "ches-2011-24091"
literal "false"

\end_inset

) is used with standard SHA-512 hashing.
 Key derivation is based on BIP32 with ED25519 modification in SLIP-0100.
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
Here we present a distributed feeless payment system with fast transaction
 confirmation time.
 The system is based on a voting-based consensus mechanism with a block
 lattice data structure.
 Since it does not involve mining, the system is highly energy efficient
 and can be operated on modest hardware.
 The system can be operated by the community with minimal investment while
 being secure and reliable.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "whitepaper"
options "apsrev4-1"

\end_inset


\end_layout

\end_body
\end_document
